From 643d36527ac7bfbd762c9c33e3066aa59cf2523b Mon Sep 17 00:00:00 2001
From: peak3d <pfau@peak3d.de>
Date: Mon, 24 Jul 2017 17:56:49 +0200
Subject: [PATCH] [AML] PTS switch rework / disable switch for 64bit linux-os

---
 .../cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp | 45 +++++++++++++++-------
 xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h  |  3 +-
 2 files changed, 33 insertions(+), 15 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
index e9079fe..b0b6a5f 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
@@ -1380,6 +1380,7 @@ CAMLCodec::CAMLCodec()
   : m_opened(false)
   , m_ptsIs64us(false)
   , m_cur_pts(INT64_0)
+  , m_ptsOverflow(0)
   , m_last_pts(0)
   , m_bufferIndex(-1)
   , m_state(0)
@@ -1436,7 +1437,6 @@ bool CAMLCodec::OpenDecoder(CDVDStreamInfo &hints)
   m_zoom = -1;
   m_contrast = -1;
   m_brightness = -1;
-  m_start_adj = 0;
   m_hints = hints;
   m_state = 0;
   m_frameSizes.clear();
@@ -1667,6 +1667,8 @@ bool CAMLCodec::OpenDecoder(CDVDStreamInfo &hints)
 
   CLog::Log(LOGNOTICE, "CAMLCodec::OpenDecoder - using V4L2 pts format: %s", m_ptsIs64us ? "64Bit":"32Bit");
 
+  m_ptsOverflow = m_ptsIs64us ? 0 : INT64_0;
+
   m_opened = true;
   // vcodec is open, update speed if it was
   // changed before VideoPlayer called OpenDecoder.
@@ -1795,8 +1797,8 @@ void CAMLCodec::Reset()
 
   // reset some interal vars
   m_cur_pts = INT64_0;
+  m_ptsOverflow = m_ptsIs64us ? 0 : INT64_0;
   m_state = 0;
-  m_start_adj = 0;
   m_frameSizes.clear();
   m_frameSizeSum = 0;
 
@@ -1831,10 +1833,7 @@ int CAMLCodec::Decode(uint8_t *pData, size_t iSize, double dts, double pts)
       am_private->am_pkt.avpts = INT64_0;
     else
     {
-      am_private->am_pkt.avpts = 0.5 + (pts * PTS_FREQ) / DVD_TIME_BASE;\
-      if (!m_start_adj && am_private->am_pkt.avpts >= 0x7fffffff)
-        m_start_adj = am_private->am_pkt.avpts & ~0x0000ffff;
-      am_private->am_pkt.avpts -= m_start_adj;
+      am_private->am_pkt.avpts = 0.5 + (pts * PTS_FREQ) / DVD_TIME_BASE;
       m_state |= STATE_HASPTS;
     }
 
@@ -1845,14 +1844,25 @@ int CAMLCodec::Decode(uint8_t *pData, size_t iSize, double dts, double pts)
     else
     {
       am_private->am_pkt.avdts = 0.5 + (dts * PTS_FREQ) / DVD_TIME_BASE;
-      if (!m_start_adj && am_private->am_pkt.avdts >= 0x7fffffff)
-        m_start_adj = am_private->am_pkt.avdts & ~0x0000ffff;
-      am_private->am_pkt.avdts -= m_start_adj;
 
       // For VC1 AML decoder uses PTS only on I-Frames
       if (am_private->am_pkt.avpts == INT64_0 && (((size_t)am_private->gcodec.param) & KEYFRAME_PTS_ONLY))
         am_private->am_pkt.avpts = am_private->am_pkt.avdts;
     }
+
+  //Handle PTS overflow
+  if (!m_ptsIs64us)
+  {
+    if (am_private->am_pkt.avpts != INT64_0)
+    {
+      if (m_ptsOverflow == INT64_0)
+        m_ptsOverflow = am_private->am_pkt.avpts & 0xFFFF80000000ULL;
+      am_private->am_pkt.avpts &= 0x7FFFFFFF;
+    }
+    if (am_private->am_pkt.avdts != INT64_0)
+      am_private->am_pkt.avdts &= 0x7FFFFFFF;
+  }
+
     // We use this to determine the fill state if no PTS is given
     if (m_cur_pts == INT64_0)
     {
@@ -1898,16 +1908,16 @@ int CAMLCodec::Decode(uint8_t *pData, size_t iSize, double dts, double pts)
 
   if (g_advancedSettings.CanLogComponent(LOGVIDEO))
   {
-    CLog::Log(LOGDEBUG, "CAMLCodec::Decode: ret: %d, sz: %u, dts_in: %0.4lf[%llX], pts_in: %0.4lf[%llX], adj:%llu, ptsOut:%0.4f, amlpts:%d, idx:%u, timesize:%0.4f",
+    CLog::Log(LOGDEBUG, "CAMLCodec::Decode: ret: %d, sz: %u, dts_in: %0.4lf[%llX], pts_in: %0.4lf[%llX], ptsOut:%0.4f, amlpts:%d, idx:%u, timesize:%0.4f, overflow:%llx",
       rtn,
       static_cast<unsigned int>(iSize),
       dts / DVD_TIME_BASE, am_private->am_pkt.avdts,
       pts / DVD_TIME_BASE, am_private->am_pkt.avpts,
-      m_start_adj,
       static_cast<float>(m_cur_pts)/PTS_FREQ,
       static_cast<int>(m_cur_pts),
       m_bufferIndex,
-      timesize
+      timesize,
+      m_ptsOverflow
     );
   }
 
@@ -2029,10 +2039,19 @@ bool CAMLCodec::GetPicture(DVDVideoPicture *pDvdVideoPicture)
   if (m_last_pts <= 0)
     pDvdVideoPicture->iDuration = (double)(am_private->video_rate * DVD_TIME_BASE) / UNIT_FREQ;
   else
+  {
+    // Check for int overflow
+    if (m_cur_pts + 0xFFFFFFF < m_last_pts)
+    {
+      m_last_pts -= 0x7FFFFFFF;
+      m_ptsOverflow += 0x80000000;
+      CLog::Log(LOGDEBUG, "CAMLCodec::GetPicture, PTS overflow incremented(%lld)", m_ptsOverflow);
+    }
     pDvdVideoPicture->iDuration = (double)((m_cur_pts - m_last_pts) * DVD_TIME_BASE) / PTS_FREQ;
+  }
 
   pDvdVideoPicture->dts = DVD_NOPTS_VALUE;
-  pDvdVideoPicture->pts = (double)GetCurPts() / PTS_FREQ * DVD_TIME_BASE;
+  pDvdVideoPicture->pts = (double)(m_cur_pts + m_ptsOverflow) / PTS_FREQ * DVD_TIME_BASE;
 
   return true;
 }
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
index ee7928a..c7f5d62 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
@@ -49,7 +49,6 @@ public:
   void          SetSpeed(int speed);
   void          SetVideoRect(const CRect &SrcRect, const CRect &DestRect);
   void          SetVideoRate(int videoRate);
-  int64_t       GetCurPts() const { return m_cur_pts + m_start_adj; }
   int           GetOMXPts() const { return static_cast<int>(m_cur_pts); }
   uint32_t      GetBufferIndex() const { return m_bufferIndex; };
   static float  OMXPtsToSeconds(int omxpts);
@@ -83,8 +82,8 @@ private:
   int              m_speed;
   int64_t          m_cur_pts;
   uint32_t         m_max_frame_size;
-  int64_t          m_start_adj;
   int64_t          m_last_pts;
+  int64_t          m_ptsOverflow;
   uint32_t         m_bufferIndex;
 
   CRect            m_dst_rect;
-- 
1.8.3.1

