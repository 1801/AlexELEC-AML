diff -Naurp kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
--- kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp	2017-09-19 17:57:34.000000000 +0300
+++ kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp	2017-09-19 18:35:37.000000000 +0300
@@ -310,7 +310,7 @@ static const int64_t INT64_0 = 0x8000000
 #define CODEC_TAG_jpeg  (0x6765706a)
 #define CODEC_TAG_mjpa  (0x61706a6d)
 
-#define RW_WAIT_TIME    (20 * 1000) // 20ms
+#define RW_WAIT_TIME    (5 * 1000) // 5ms
 
 #define P_PRE           (0x02000000)
 #define F_PRE           (0x03000000)
@@ -727,7 +727,6 @@ int write_av_packet(am_private_t *para,
     while (size > 0 && pkt->isvalid) {
         write_bytes = para->m_dll->codec_write(pkt->codec, buf, size);
         if (write_bytes < 0 || write_bytes > size) {
-            CLog::Log(LOGDEBUG, "write codec data failed, write_bytes(%d), errno(%d), size(%d)", write_bytes, errno, size);
             if (-errno != AVERROR(EAGAIN)) {
                 CLog::Log(LOGDEBUG, "write codec data failed!");
                 return PLAYER_WR_FAILED;
@@ -738,7 +737,7 @@ int write_av_packet(am_private_t *para,
                 pkt->data += len;
                 pkt->data_size -= len;
                 usleep(RW_WAIT_TIME);
-                CLog::Log(LOGDEBUG, "usleep(RW_WAIT_TIME), len(%d)", len);
+                CLog::Log(LOGDEBUG, "Codec buffer full, try after %d ms, len(%d)", RW_WAIT_TIME / 1000, len);
                 return PLAYER_SUCCESS;
             }
         } else {
@@ -1559,6 +1558,8 @@ bool CAMLCodec::OpenDecoder(CDVDStreamIn
   m_hints = hints;
   m_state = 0;
   m_frameSizes.clear();
+  m_frameCount = 0;
+  m_hints.timeToDisplay = hints.timeToDisplay;
   m_frameSizeSum = 0;
 
   if (!OpenAmlVideo(hints))
@@ -1953,6 +1954,10 @@ int CAMLCodec::Decode(uint8_t *pData, si
     am_private->am_pkt.data = pData;
     am_private->am_pkt.data_size = iSize;
 
+    struct buf_status bs;
+    m_dll->codec_get_vbuf_state(&am_private->vcodec, &bs);
+    CLog::Log(LOGDEBUG, "CAMLCodec::Adddata: dl:%d rp:%u sum:%u sz:%u wait:%d", bs.data_len, bs.read_pointer, m_frameSizeSum, iSize, 1200 + iSize/800);  
+
     am_private->am_pkt.newflag    = 1;
     am_private->am_pkt.isvalid    = 1;
     am_private->am_pkt.avduration = 0;
@@ -2024,6 +2029,8 @@ int CAMLCodec::Decode(uint8_t *pData, si
     if (loop == 100)
       // Decoder got stuck; Reset
       Reset();
+    else
+      usleep(1200 + iSize/800);
 
     if ((m_state & STATE_PREFILLED) == 0 && timesize >= 1.0)
        m_state |= STATE_PREFILLED;
@@ -2105,7 +2112,7 @@ int CAMLCodec::DequeueBuffer()
   v4l2_buffer vbuf = { 0 };
   vbuf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
 
-  //Driver change from 10 to 0ms latency, throttle here
+  //Driver change from 5 to 0ms latency, throttle here
   std::chrono::time_point<std::chrono::system_clock> now(std::chrono::system_clock::now());
 
   if (m_amlVideoFile->IOControl(VIDIOC_DQBUF, &vbuf) < 0)
@@ -2115,8 +2122,8 @@ int CAMLCodec::DequeueBuffer()
 
     std::chrono::milliseconds elapsed(std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now() - now).count());
 
-    if (elapsed < std::chrono::milliseconds(10))
-      std::this_thread::sleep_for(std::chrono::milliseconds(10) - elapsed);
+    if (elapsed < std::chrono::milliseconds(5))
+      std::this_thread::sleep_for(std::chrono::milliseconds(5) - elapsed);
 
     return -errno;
   }
@@ -2146,11 +2153,14 @@ float CAMLCodec::GetTimeSize()
   struct buf_status bs;
   m_dll->codec_get_vbuf_state(&am_private->vcodec, &bs);
 
-  //CLog::Log(LOGDEBUG, "CAMLCodec::Decode: buf status: s:%d dl:%d fl:%d rp:%u wp:%u",bs.size, bs.data_len, bs.free_len, bs.read_pointer, bs.write_pointer);  
+  CLog::Log(LOGDEBUG, "CAMLCodec::Decode: len:%d dl:%d rp:%u fs:%u front:%u fr_count:%d ttd:%dms", 
+    m_frameSizes.size(), bs.data_len, bs.read_pointer, m_frameSizeSum, m_frameSizes.front(), m_frameCount, std::chrono::duration_cast<std::chrono::milliseconds>(*(m_hints.timeToDisplay) - std::chrono::system_clock::now()).count() );
   while (m_frameSizeSum >  (unsigned int)bs.data_len)
   {
     m_frameSizeSum -= m_frameSizes.front();
     m_frameSizes.pop_front();
+    m_frameCount++; 
+    CLog::Log(LOGDEBUG, "CAMLCodec::Decode: len:%d dl:%d rp:%u fs:%u front:%u fr_count:%d", m_frameSizes.size(), bs.data_len, bs.read_pointer, m_frameSizeSum, m_frameSizes.front(), m_frameCount);
   }
   if (bs.free_len < (bs.data_len >> 1))
     return 7.0;
@@ -2182,6 +2192,8 @@ bool CAMLCodec::GetPicture(DVDVideoPictu
   pDvdVideoPicture->dts = DVD_NOPTS_VALUE;
   pDvdVideoPicture->pts = (double)(m_cur_pts + m_ptsOverflow) / PTS_FREQ * DVD_TIME_BASE;
 
+  CLog::Log(LOGDEBUG, "CAMLCodec::GetPicture: index: %u, pts: %0.4lf fsz:%u", m_bufferIndex, pDvdVideoPicture->pts/DVD_TIME_BASE, m_cur_pts * PTS_FREQ, m_frameSizeSum);
+  m_frameCount--;
   return true;
 }
 
diff -Naurp kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
--- kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h	2017-09-19 17:57:34.000000000 +0300
+++ kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h	2017-09-19 18:36:59.000000000 +0300
@@ -107,7 +107,7 @@ private:
 
   std::deque<uint32_t> m_frameSizes;
   std::uint32_t m_frameSizeSum;
-
+  int		   m_frameCount = 0;
   static long  m_pollSync;
   static int   m_pollDevice;
 };
diff -Naurp kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
--- kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp	2017-09-19 17:57:34.000000000 +0300
+++ kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp	2017-09-19 18:47:35.000000000 +0300
@@ -80,6 +80,7 @@ bool CDVDVideoCodecAmlogic::Open(CDVDStr
   }
 
   m_hints = hints;
+  m_hints.timeToDisplay = hints.timeToDisplay;
 
   switch(m_hints.codec)
   {
diff -Naurp kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/DVDStreamInfo.h kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/DVDStreamInfo.h
--- kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/DVDStreamInfo.h	2017-09-08 16:48:09.000000000 +0300
+++ kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/DVDStreamInfo.h	2017-09-19 18:46:35.000000000 +0300
@@ -29,6 +29,7 @@
 extern "C" {
 #include "libavcodec/avcodec.h"
 }
+#include <chrono>
 
 class CDemuxStream;
 
@@ -73,6 +74,7 @@ public:
   int orientation; // orientation of the video in degress counter clockwise
   int bitsperpixel;
   std::string stereo_mode; // stereoscopic 3d mode
+  std::chrono::time_point<std::chrono::system_clock> *timeToDisplay;
 
   // AUDIO
   int channels;
diff -Naurp kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoPlayer.cpp kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoPlayer.cpp
--- kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoPlayer.cpp	2017-09-19 17:57:34.000000000 +0300
+++ kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoPlayer.cpp	2017-09-19 18:00:06.000000000 +0300
@@ -3647,6 +3647,10 @@ bool CVideoPlayer::OpenStream(CCurrentSt
 
     if(m_pInputStream && m_pInputStream->IsStreamType(DVDSTREAM_TYPE_DVD))
       hint.filename = "dvd";
+    if (hint.fpsrate / hint.fpsscale > 200) {
+      hint.fpsrate = 60000;
+      hint.fpsscale = 1001;
+    }
   }
   else if(STREAM_SOURCE_MASK(source) == STREAM_SOURCE_VIDEOMUX)
   {
diff -Naurp kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
--- kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp	2017-09-19 17:57:34.000000000 +0300
+++ kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp	2017-09-19 18:42:22.000000000 +0300
@@ -120,6 +120,9 @@ double CVideoPlayerVideo::GetOutputDelay
 bool CVideoPlayerVideo::OpenStream( CDVDStreamInfo &hint )
 {
   m_processInfo.ResetVideoCodecInfo();
+  m_hints = hint;
+  m_timeToDisplay = std::chrono::system_clock::now() + std::chrono::milliseconds(10000);
+  m_hints.timeToDisplay = &m_timeToDisplay;
 
   CRenderInfo info;
   info = m_renderManager.GetRenderInfo();
@@ -128,8 +131,8 @@ bool CVideoPlayerVideo::OpenStream( CDVD
   if(hint.flags & AV_DISPOSITION_ATTACHED_PIC)
     return false;
 
-  CLog::Log(LOGNOTICE, "Creating video codec with codec id: %i", hint.codec);
-  CDVDVideoCodec* codec = CDVDFactoryCodec::CreateVideoCodec(hint, m_processInfo, info);
+  CLog::Log(LOGNOTICE, "Creating video codec with codec id: %i", m_hints.codec);
+  CDVDVideoCodec* codec = CDVDFactoryCodec::CreateVideoCodec(m_hints, m_processInfo, info);
   if(!codec)
   {
     CLog::Log(LOGERROR, "Unsupported video codec");
@@ -137,7 +140,7 @@ bool CVideoPlayerVideo::OpenStream( CDVD
   }
 
   if(m_messageQueue.IsInited())
-    m_messageQueue.Put(new CDVDMsgVideoCodecChange(hint, codec), 0);
+    m_messageQueue.Put(new CDVDMsgVideoCodecChange(m_hints, codec), 0);
   else
   {
     OpenStream(hint, codec);
@@ -863,7 +866,10 @@ int CVideoPlayerVideo::OutputPicture(con
   // don't wait when going ff
   if (m_speed > DVD_PLAYSPEED_NORMAL)
     maxWaitTime = std::max(timeToDisplay, 0);
+  CLog::Log(LOGDEBUG,"CVideoPlayerVideo::%s - timeToDisplay: %dms pts: %0.4lf", __FUNCTION__, timeToDisplay, pPicture->pts/1000000);
+  m_timeToDisplay = std::chrono::system_clock::now() + std::chrono::milliseconds(timeToDisplay);
   int buffer = m_renderManager.WaitForBuffer(m_bAbortOutput, maxWaitTime);
+  CLog::Log(LOGDEBUG,"CVideoPlayerVideo::%s - WaitForBuffer Level:%d", __FUNCTION__, buffer);
   if (buffer < 0)
   {
     m_droppingStats.AddOutputDropGain(pts, 1);
diff -Naurp kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoPlayerVideo.h kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoPlayerVideo.h
--- kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoPlayerVideo.h	2017-09-08 16:48:09.000000000 +0300
+++ kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoPlayerVideo.h	2017-09-19 18:45:26.000000000 +0300
@@ -31,6 +31,7 @@
 #include "cores/VideoPlayer/VideoRenderers/RenderManager.h"
 #include "utils/BitstreamStats.h"
 #include <atomic>
+#include <chrono>
 
 class CDemuxStreamVideo;
 
@@ -148,5 +149,6 @@ protected:
   CDroppingStats m_droppingStats;
   CRenderManager& m_renderManager;
   DVDVideoPicture m_picture;
+  std::chrono::time_point<std::chrono::system_clock>   m_timeToDisplay;
 };
 
diff -Naurp kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.cpp kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.cpp
--- kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.cpp	2017-09-19 17:57:34.000000000 +0300
+++ kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.cpp	2017-09-19 18:43:27.000000000 +0300
@@ -95,6 +95,7 @@ int CRendererAML::GetImage(YV12Image *im
 void CRendererAML::AddVideoPictureHW(DVDVideoPicture &picture, int index)
 {
   BUFFER &buf = m_buffers[index];
+  CLog::Log(LOGDEBUG, "CRendererAML::AddVideoPicture: idx:%d, pts:%0.4lf", index, picture.pts / 1000000);
   if (picture.amlcodec)
     buf.hwDec = picture.amlcodec->Retain();
 }
diff -Naurp kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.h kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.h
--- kodi-17.5-rc1-07424d3/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.h	2017-09-19 17:57:34.000000000 +0300
+++ kodi-17.5-rc1-07424d3-patch/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererAML.h	2017-09-19 18:43:55.000000000 +0300
@@ -62,7 +62,7 @@ public:
 private:
 
   int m_iRenderBuffer;
-  static const int m_numRenderBuffers = 4;
+  static const int m_numRenderBuffers = 8;
 
   struct BUFFER
   {
