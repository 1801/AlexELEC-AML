diff -Naurp kodi-17.0-beta7-b9fe8e9/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp kodi-17.0-beta7-b9fe8e9-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
--- kodi-17.0-beta7-b9fe8e9/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp	2016-12-01 12:29:44.000000000 +0200
+++ kodi-17.0-beta7-b9fe8e9-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp	2016-12-01 13:01:07.000000000 +0200
@@ -443,6 +443,9 @@ static vformat_t codecid_to_vformat(enum
     case AV_CODEC_ID_WMV3:
       format = VFORMAT_VC1;
       break;
+    case AV_CODEC_ID_VP9:
+      format = VFORMAT_VP9;
+      break;
     case AV_CODEC_ID_AVS:
     case AV_CODEC_ID_CAVS:
       format = VFORMAT_AVS;
@@ -554,6 +557,9 @@ static vdec_type_t codec_tag_to_vdec_typ
       // vp6
       dec_type = VIDEO_DEC_FORMAT_SW;
       break;
+    case AV_CODEC_ID_VP9:
+      dec_type = VIDEO_DEC_FORMAT_VP9;
+      break;
     case AV_CODEC_ID_CAVS:
     case AV_CODEC_ID_AVS:
       // avs
@@ -961,6 +967,116 @@ static int hevc_write_header(am_private_
     return ret;
 }
 
+int vp9_update_frame_header(am_packet_t *pkt) {
+
+    int dsize = pkt->data_size;
+    unsigned char *buf = pkt->data;
+    unsigned char marker;
+    int frame_number;
+    int cur_frame, cur_mag, mag, index_sz, offset[9], size[8], tframesize[9];
+    int mag_ptr;
+    int ret;
+    unsigned char *old_header = NULL;
+    int total_datasize = 0;
+
+    pkt->avpkt.data = pkt->data;
+    pkt->avpkt.size = pkt->data_size;
+
+    if (buf == NULL) return PLAYER_SUCCESS; /*something error. skip add header*/
+    marker = buf[dsize - 1];
+    if ((marker & 0xe0) == 0xc0) {
+        frame_number = (marker & 0x7) + 1;
+        mag = ((marker >> 3) & 0x3) + 1;
+        index_sz = 2 + mag * frame_number;
+        CLog::Log(LOGDEBUG, " frame_number : %d, mag : %d; index_sz : %d\n", frame_number, mag, index_sz);
+        offset[0] = 0;
+        mag_ptr = dsize - mag * frame_number - 2;
+        if (buf[mag_ptr] != marker) {
+            CLog::Log(LOGDEBUG, " Wrong marker2 : 0x%X --> 0x%X\n", marker, buf[mag_ptr]);
+            return PLAYER_SUCCESS;
+        }
+        mag_ptr++;
+        for (cur_frame = 0; cur_frame < frame_number; cur_frame++) {
+            size[cur_frame] = 0; // or size[0] = bytes_in_buffer - 1; both OK
+            for (cur_mag = 0; cur_mag < mag; cur_mag++) {
+                size[cur_frame] = size[cur_frame]  | (buf[mag_ptr] << (cur_mag*8) );
+                mag_ptr++;
+            }
+            offset[cur_frame+1] = offset[cur_frame] + size[cur_frame];
+            if (cur_frame == 0)
+                tframesize[cur_frame] = size[cur_frame];
+            else
+                tframesize[cur_frame] = tframesize[cur_frame - 1] + size[cur_frame];
+            total_datasize += size[cur_frame];
+        }
+    } else {
+        frame_number = 1;
+        offset[0] = 0;
+        size[0] = dsize; // or size[0] = bytes_in_buffer - 1; both OK
+        total_datasize += dsize;
+        tframesize[0] = dsize;
+    }
+    if (total_datasize > dsize) {
+        CLog::Log(LOGDEBUG, "DATA overflow : 0x%X --> 0x%X\n", total_datasize, dsize);
+        return PLAYER_SUCCESS;
+    }
+    if (frame_number >= 1) {
+        /*
+        if only one frame ,can used headers.
+        */
+        int need_more = total_datasize + frame_number * 16 - dsize;
+
+        av_buffer_unref(&pkt->avpkt.buf);
+        ret = av_grow_packet(&(pkt->avpkt), need_more);
+        if (ret < 0) {
+            CLog::Log(LOGDEBUG, "ERROR!!! grow_packet for apk failed.!!!\n");
+            return ret;
+        }
+
+        pkt->data = pkt->avpkt.data;
+        pkt->data_size = pkt->avpkt.size;
+    }
+    for (cur_frame = frame_number - 1; cur_frame >= 0; cur_frame--) {
+        AVPacket *avpkt = &(pkt->avpkt);
+        int framesize = size[cur_frame];
+        int oldframeoff = tframesize[cur_frame] - framesize;
+        int outheaderoff = oldframeoff + cur_frame * 16;
+        uint8_t *fdata = avpkt->data + outheaderoff;
+        uint8_t *old_framedata = avpkt->data + oldframeoff;
+        memmove(fdata + 16, old_framedata, framesize);
+        framesize += 4;/*add 4. for shift.....*/
+
+        /*add amlogic frame headers.*/
+        fdata[0] = (framesize >> 24) & 0xff;
+        fdata[1] = (framesize >> 16) & 0xff;
+        fdata[2] = (framesize >> 8) & 0xff;
+        fdata[3] = (framesize >> 0) & 0xff;
+        fdata[4] = ((framesize >> 24) & 0xff) ^0xff;
+        fdata[5] = ((framesize >> 16) & 0xff) ^0xff;
+        fdata[6] = ((framesize >> 8) & 0xff) ^0xff;
+        fdata[7] = ((framesize >> 0) & 0xff) ^0xff;
+        fdata[8] = 0;
+        fdata[9] = 0;
+        fdata[10] = 0;
+        fdata[11] = 1;
+        fdata[12] = 'A';
+        fdata[13] = 'M';
+        fdata[14] = 'L';
+        fdata[15] = 'V';
+        framesize -= 4;/*del 4 to real framesize for check.....*/
+       if (!old_header) {
+           ///nothing
+       } else if (old_header > fdata + 16 + framesize) {
+           CLog::Log(LOGDEBUG, "data has gaps,set to 0\n");
+           memset(fdata + 16 + framesize, 0, (old_header - fdata + 16 + framesize));
+       } else if (old_header < fdata + 16 + framesize) {
+           CLog::Log(LOGDEBUG, "ERROR!!! data over writed!!!! over write %d\n", fdata + 16 + framesize - old_header);
+       }
+       old_header = fdata;
+    }
+    return PLAYER_SUCCESS;
+}
+
 static int wmv3_write_header(am_private_t *para, am_packet_t *pkt)
 {
     CLog::Log(LOGDEBUG, "wmv3_write_header");
@@ -1374,6 +1490,9 @@ int set_header_info(am_private_t *para)
             pkt->hdr->size = 4;
             pkt->newflag = 1;
         }
+    } else if (para->video_format == VFORMAT_VP9) {
+
+        vp9_update_frame_header(pkt);
     }
   }
   return PLAYER_SUCCESS;
@@ -1610,6 +1729,12 @@ bool CAMLCodec::OpenDecoder(CDVDStreamIn
       am_private->gcodec.param  = (void*)EXTERNAL_PTS;
       if (m_hints.ptsinvalid)
         am_private->gcodec.param = (void*)(EXTERNAL_PTS | SYNC_OUTSIDE);
+      break;
+    case VFORMAT_VP9:
+      am_private->gcodec.format = VIDEO_DEC_FORMAT_VP9;
+      am_private->gcodec.param  = (void*)EXTERNAL_PTS;
+      if (m_hints.ptsinvalid)
+        am_private->gcodec.param = (void*)(EXTERNAL_PTS | SYNC_OUTSIDE);
       break;
   }
   am_private->gcodec.param = (void *)((std::uintptr_t)am_private->gcodec.param | (am_private->video_rotation_degree << 16));
diff -Naurp kodi-17.0-beta7-b9fe8e9/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp kodi-17.0-beta7-b9fe8e9-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
--- kodi-17.0-beta7-b9fe8e9/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp	2016-12-01 12:29:44.000000000 +0200
+++ kodi-17.0-beta7-b9fe8e9-patch/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp	2016-12-01 13:02:38.000000000 +0200
@@ -190,6 +190,13 @@ bool CDVDVideoCodecAmlogic::Open(CDVDStr
     case AV_CODEC_ID_CAVS:
       m_pFormatName = "am-avs";
       break;
+    case AV_CODEC_ID_VP9:
+      if (!aml_support_vp9())
+      {
+        return false;
+      }
+      m_pFormatName = "am-vp9";
+      break;
     case AV_CODEC_ID_HEVC:
       if (aml_support_hevc()) {
         if (!aml_support_hevc_4k2k() && ((m_hints.width > 1920) || (m_hints.height > 1088)))
diff -Naurp kodi-17.0-beta7-b9fe8e9/xbmc/utils/AMLUtils.cpp kodi-17.0-beta7-b9fe8e9-patch/xbmc/utils/AMLUtils.cpp
--- kodi-17.0-beta7-b9fe8e9/xbmc/utils/AMLUtils.cpp	2016-12-01 12:29:44.000000000 +0200
+++ kodi-17.0-beta7-b9fe8e9-patch/xbmc/utils/AMLUtils.cpp	2016-12-01 13:03:52.000000000 +0200
@@ -235,6 +235,23 @@ AML_SUPPORT_H264_4K2K aml_support_h264_4
   return has_h264_4k2k;
 }
 
+bool aml_support_vp9()
+{
+  static int has_vp9 = -1;
+
+  if (has_vp9 == -1)
+  {
+    CRegExp regexp;
+    regexp.RegComp("vp9:.*compressed");
+    std::string valstr;
+    if (SysfsUtils::GetString("/sys/class/amstream/vcodec_profile", valstr) != 0)
+      has_vp9 = 0;
+    else
+      has_vp9 = (regexp.RegFind(valstr) >= 0) ? 1 : 0;
+  }
+  return (has_vp9 == 1);
+}
+
 void aml_set_audio_passthrough(bool passthrough)
 {
   SysfsUtils::SetInt("/sys/class/audiodsp/digital_raw", passthrough ? 2:0);
diff -Naurp kodi-17.0-beta7-b9fe8e9/xbmc/utils/AMLUtils.h kodi-17.0-beta7-b9fe8e9-patch/xbmc/utils/AMLUtils.h
--- kodi-17.0-beta7-b9fe8e9/xbmc/utils/AMLUtils.h	2016-12-01 11:20:47.000000000 +0200
+++ kodi-17.0-beta7-b9fe8e9-patch/xbmc/utils/AMLUtils.h	2016-12-01 13:04:38.000000000 +0200
@@ -57,6 +57,7 @@ bool aml_support_hevc();
 bool aml_support_hevc_4k2k();
 bool aml_support_hevc_10bit();
 AML_SUPPORT_H264_4K2K aml_support_h264_4k2k();
+bool aml_support_vp9();
 void aml_set_audio_passthrough(bool passthrough);
 bool aml_IsHdmiConnected();
 bool aml_mode_to_resolution(const char *mode, RESOLUTION_INFO *res);
