diff --git a/drivers/amlogic/amports/amvideocap.c b/drivers/amlogic/amports/amvideocap.c
index b3737fb9696..882fb28967b 100755
--- a/drivers/amlogic/amports/amvideocap.c
+++ b/drivers/amlogic/amports/amvideocap.c
@@ -225,18 +225,18 @@ static int amvideocap_capture_put_frame
 static int amvideocap_get_input_format(struct vframe_s *vf)
 {
 	int format = GE2D_FORMAT_M24_NV21;
-	/* pr_info("vf->type:0x%x\n", vf->type); */
+	/* pr_debug("vf->type:0x%x\n", vf->type); */
 
 	if ((vf->type & VIDTYPE_VIU_422) == VIDTYPE_VIU_422) {
-		pr_info
+		pr_debug
 		("*****************Into VIDTYPE_VIU_422******************\n");
 		format = GE2D_FORMAT_S16_YUV422;
 	} else if ((vf->type & VIDTYPE_VIU_444) == VIDTYPE_VIU_444) {
-		pr_info
+		pr_debug
 		("*****************Into VIDTYPE_VIU_444******************\n");
 		format = GE2D_FORMAT_S24_YUV444;
 	} else if ((vf->type & VIDTYPE_VIU_NV21) == VIDTYPE_VIU_NV21) {
-		pr_info
+		pr_debug
 		("****************Into VIDTYPE_VIU_NV21******************\n");
 		format = GE2D_FORMAT_M24_NV21;
 	}
@@ -309,13 +309,13 @@ static ssize_t amvideocap_YUV_to_RGB(
 		pr_err("%s: failed to alloc y addr\n", __func__);
 		return -1;
 	}
-	pr_info("RGB_phy_addr:%x\n", (unsigned int)priv->phyaddr);
+	pr_debug("RGB_phy_addr:%x\n", (unsigned int)priv->phyaddr);
 	RGB_addr = (unsigned long)priv->vaddr;
 	if (!RGB_addr) {
 		pr_err("%s: failed to remap y addr\n", __func__);
 		return -1;
 	}
-	pr_info("RGB_addr:%lx\n", RGB_addr);
+	pr_debug("RGB_addr:%lx\n", RGB_addr);
 
 	if (vf == NULL) {
 		pr_err("%s: vf is NULL\n", __func__);
@@ -356,7 +356,7 @@ static ssize_t amvideocap_YUV_to_RGB(
 		((intfmt == GE2D_FORMAT_S16_YUV422) ||
 		((intfmt == GE2D_FORMAT_S24_YUV444) &&
 		(get_cpu_type() >= MESON_CPU_MAJOR_ID_TXL)))) {
-		pr_info("input_height = %d , vf->type_original = %x\n" ,
+		pr_debug("input_height = %d , vf->type_original = %x\n" ,
 			input_height, vf->type_original);
 		if ((vf->source_type == VFRAME_SOURCE_TYPE_HDMI) ||
 			(vf->source_type == VFRAME_SOURCE_TYPE_CVBS) ||
@@ -369,7 +369,7 @@ static ssize_t amvideocap_YUV_to_RGB(
 			}
 		} else {
 			/*local playback and DTV*/
-			pr_info("vf->prog_proc_config = %d",
+			pr_debug("vf->prog_proc_config = %d",
 				vf->prog_proc_config);
 			if ((!vf->prog_proc_config) &&
 				(!(vf->type_original & VIDTYPE_INTERLACE))) {
@@ -398,7 +398,7 @@ static ssize_t amvideocap_YUV_to_RGB(
 	if (((vf->bitdepth & BITDEPTH_Y10)) &&
 		(intfmt == GE2D_FORMAT_S16_YUV422) &&
 		(get_cpu_type() < MESON_CPU_MAJOR_ID_TXL)) {
-		pr_info("vf->width = %d , vf->height = %d , vf->bitdepth = %d\n",
+		pr_debug("vf->width = %d , vf->height = %d , vf->bitdepth = %d\n",
 		vf->width, vf->height, vf->bitdepth);
 		do_gettimeofday(&start);
 		psrc = phys_to_virt(cs0.addr);
@@ -406,7 +406,7 @@ static ssize_t amvideocap_YUV_to_RGB(
 		h_align = ((vf->height + 32 - 1) & ~(32 - 1));
 		temp_cma_buf_size =
 		(int)((w_align * h_align * 2)/(1024 * 1024)) + 1;
-		pr_info("phybufaddr_8bit buffer size = %d\n",
+		pr_debug("phybufaddr_8bit buffer size = %d\n",
 			temp_cma_buf_size);
 		phybufaddr_8bit = codec_mm_alloc_for_dma(CMA_NAME,
 			temp_cma_buf_size * SZ_1M / PAGE_SIZE,
@@ -423,7 +423,7 @@ static ssize_t amvideocap_YUV_to_RGB(
 
 		pdst = phys_to_virt(temp_cs0.addr);
 
-		pr_info("height_after_di = %d" , height_after_di);
+		pr_debug("height_after_di = %d" , height_after_di);
 		line_start = psrc;
 		for (i = 0; i < height_after_di; i++) {
 			for (read_size = 0; read_size < w_align*3;
@@ -498,10 +498,10 @@ static ssize_t amvideocap_YUV_to_RGB(
 		do_gettimeofday(&end);
 		time_use = (end.tv_sec - start.tv_sec) * 1000 +
 		(end.tv_usec - start.tv_usec) / 1000;
-		pr_info("10to8 conversion cost time: %ldms\n", time_use);
+		pr_debug("10to8 conversion cost time: %ldms\n", time_use);
 	}
 
-	pr_info("y_index=[0x%x]  u_index=[0x%x] cur_index:%x\n", y_index,
+	pr_debug("y_index=[0x%x]  u_index=[0x%x] cur_index:%x\n", y_index,
 			u_index, cur_index);
 
 	if (((vf->bitdepth & BITDEPTH_Y10)) &&
@@ -516,8 +516,8 @@ static ssize_t amvideocap_YUV_to_RGB(
 		ge2d_config.src_planes[2].addr = temp_cs2.addr;
 		ge2d_config.src_planes[2].w = temp_cs2.width;
 		ge2d_config.src_planes[2].h = temp_cs2.height;
-		pr_info("w=%d-height=%d\n", temp_cs0.width, temp_cs0.height);
-		pr_info("cs0.width=%d, cs0.height=%d\n", cs0.width, cs0.height);
+		pr_debug("w=%d-height=%d\n", temp_cs0.width, temp_cs0.height);
+		pr_debug("cs0.width=%d, cs0.height=%d\n", cs0.width, cs0.height);
 	} else {
 		ge2d_config.src_planes[0].addr = cs0.addr;
 		ge2d_config.src_planes[0].w = cs0.width;
@@ -528,7 +528,7 @@ static ssize_t amvideocap_YUV_to_RGB(
 		ge2d_config.src_planes[2].addr = cs2.addr;
 		ge2d_config.src_planes[2].w = cs2.width;
 		ge2d_config.src_planes[2].h = cs2.height;
-		pr_info("w=%d-height=%d cur_index:%x\n",
+		pr_debug("w=%d-height=%d cur_index:%x\n",
 			cs0.width, cs0.height, cur_index);
 	}
 
@@ -549,11 +549,11 @@ static ssize_t amvideocap_YUV_to_RGB(
 		if (intfmt == GE2D_FORMAT_S16_YUV422) {
 			if ((vf->bitdepth & BITDEPTH_Y10) &&
 				(vf->bitdepth & FULL_PACK_422_MODE)) {
-				pr_info("format is yuv422 10bit .\n");
+				pr_debug("format is yuv422 10bit .\n");
 				ge2d_config.src_para.format =
 					GE2D_FORMAT_S16_10BIT_YUV422;
 			} else if (vf->bitdepth & BITDEPTH_Y10) {
-				pr_info("format is yuv422 12bit .\n");
+				pr_debug("format is yuv422 12bit .\n");
 				ge2d_config.src_para.format =
 					GE2D_FORMAT_S16_12BIT_YUV422;
 			} else {
@@ -561,7 +561,7 @@ static ssize_t amvideocap_YUV_to_RGB(
 			}
 		} else if (intfmt == GE2D_FORMAT_S24_YUV444) {
 			if (vf->bitdepth & BITDEPTH_Y10) {
-				pr_info("format is yuv444 10bit .\n");
+				pr_debug("format is yuv444 10bit .\n");
 				ge2d_config.src_para.format =
 					GE2D_FORMAT_S24_10BIT_YUV444;
 			} else {
@@ -584,7 +584,7 @@ static ssize_t amvideocap_YUV_to_RGB(
 	ge2d_config.src_para.height = input_height;
 
 	canvas_read(canvas_idx, &cd);
-	pr_info("cd.addr:%x\n", (unsigned int)cd.addr);
+	pr_debug("cd.addr:%x\n", (unsigned int)cd.addr);
 	ge2d_config.dst_planes[0].addr = cd.addr;
 	ge2d_config.dst_planes[0].w = cd.width;
 	ge2d_config.dst_planes[0].h = cd.height;
@@ -658,14 +658,14 @@ static int amvideocap_capture_one_frame(
 	int curindex;
 	struct vframe_s *vf = vfput;
 	int ret = 0;
-	pr_info("%s:start vf=%p,index=%x\n", __func__, vf, index);
+	pr_debug("%s:start vf=%p,index=%x\n", __func__, vf, index);
 	if (!vf)
 		ret = amvideocap_capture_get_frame(priv, &vf, &curindex);
 	else
 		curindex = index;
 	if (ret < 0 || !vf)
 		return -EAGAIN;
-	pr_info("%s: get vf type=%x\n", __func__, vf->type);
+	pr_debug("%s: get vf type=%x\n", __func__, vf->type);
 
 #define CHECK_AND_SETVAL(want, def) ((want) > 0 ? (want) : (def))
 	ge2dfmt = CHECK_AND_SETVAL(priv->want.fmt, vf->type);
@@ -681,7 +681,7 @@ static int amvideocap_capture_one_frame(
 	amvideocap_capture_put_frame(priv, vf);
 
 	if (!ret) {
-		pr_info("%s: capture ok priv->want.fmt=%d\n", __func__,
+		pr_debug("%s: capture ok priv->want.fmt=%d\n", __func__,
 				priv->want.fmt);
 		priv->state = AMVIDEOCAP_STATE_FINISHED_CAPTURE;
 		priv->src.width = vf->width;
@@ -695,7 +695,7 @@ static int amvideocap_capture_one_frame(
 			priv->out.fmt);	/* RGBn */
 	} else
 		priv->state = AMVIDEOCAP_STATE_ERROR;
-	pr_info("amvideocap_capture_one_frame priv->state=%d\n", priv->state);
+	pr_debug("amvideocap_capture_one_frame priv->state=%d\n", priv->state);
 	return ret;
 }
 
@@ -744,7 +744,7 @@ static int amvideocap_capture_one_frame_wait(
 			}
 		} else {
 			ret = amvideocap_capture_one_frame(priv, NULL, 0);
-			pr_info("amvideocap_capture_one_frame_wait ret=%d\n",
+			pr_debug("amvideocap_capture_one_frame_wait ret=%d\n",
 					ret);
 		}
 	} while (ret == -EAGAIN && time_before(jiffies, timeout));
@@ -907,7 +907,7 @@ static int amvideocap_mmap(struct file *file,
 
 	if (vm_size == 0)
 		return -EAGAIN;
-	/* pr_info("mmap:%x\n",vm_size); */
+	/* pr_debug("mmap:%x\n",vm_size); */
 	off += priv->phyaddr;
 
 	vma->vm_flags |= VM_DONTEXPAND | VM_DONTDUMP | VM_IO;
@@ -917,7 +917,7 @@ static int amvideocap_mmap(struct file *file,
 		pr_err("set_cached: failed remap_pfn_range\n");
 		return -EAGAIN;
 	}
-	pr_info("amvideocap_mmap ok\n");
+	pr_debug("amvideocap_mmap ok\n");
 	return 0;
 }
 
@@ -941,9 +941,9 @@ static ssize_t amvideocap_read(struct file *file, char __user *buf,
 				HZ / 100 : HZ * 10;
 	}
 	if (!pos) {		/*trigger a new capture, */
-		pr_info("start amvideocap_read waitdelay=%d\n", waitdelay);
+		pr_debug("start amvideocap_read waitdelay=%d\n", waitdelay);
 		ret = amvideocap_capture_one_frame_wait(priv, waitdelay);
-		pr_info("amvideocap_read=%d,priv->state=%d,priv->vaddr=%p\n",
+		pr_debug("amvideocap_read=%d,priv->state=%d,priv->vaddr=%p\n",
 				ret, priv->state, priv->vaddr);
 		if ((ret == 0)
 			&& (priv->state == AMVIDEOCAP_STATE_FINISHED_CAPTURE)
@@ -951,10 +951,10 @@ static ssize_t amvideocap_read(struct file *file, char __user *buf,
 			int size = min((int)count, (priv->out.byte_per_pix *
 						priv->out.width_aligned *
 						priv->out.height));
-			pr_info
+			pr_debug
 			("priv->out_width=%d priv->out_height=%d",
 			 priv->out.width, priv->out.height);
-			pr_info
+			pr_debug
 			(" priv->outfmt_byteppix=%d, size=%d\n",
 			 priv->out.byte_per_pix, size);
 #ifdef CONFIG_CMA
@@ -1083,7 +1083,7 @@ static struct class amvideocap_class = {
 s32 amvideocap_register_memory(unsigned char *phybufaddr,
 					int phybufsize)
 {
-	pr_info("amvideocap_register_memory %p %d\n", phybufaddr, phybufsize);
+	pr_debug("amvideocap_register_memory %p %d\n", phybufaddr, phybufsize);
 	getgctrl()->phyaddr = (unsigned long)phybufaddr;
 	getgctrl()->size = (unsigned long)phybufsize;
 	getgctrl()->vaddr = 0;
@@ -1093,7 +1093,7 @@ s32 amvideocap_register_memory(unsigned char *phybufaddr,
 s32 amvideocap_dev_register(unsigned char *phybufaddr, int phybufsize)
 {
 	s32 r = 0;
-	pr_info("amvideocap_dev_register\n");
+	pr_debug("amvideocap_dev_register\n");
 
 	gLOCKINIT();
 	r = register_chrdev(0, DEVICE_NAME, &amvideocap_fops);
@@ -1216,7 +1216,7 @@ struct platform_driver amvideocap_drv = {
 static int __init amvideocap_init_module(void)
 {
 
-	pr_info("amvideocap_init_module\n");
+	pr_debug("amvideocap_init_module\n");
 	if (ge2d_amvideocap_context == NULL)
 		ge2d_amvideocap_context = create_ge2d_work_queue();
 	if ((platform_driver_register(&amvideocap_drv))) {
@@ -1234,7 +1234,7 @@ static void __exit amvideocap_remove_module(void)
 		destroy_ge2d_work_queue(ge2d_amvideocap_context);
 		ge2d_amvideocap_context = NULL;
 	}
-	pr_info("amvideocap module removed.\n");
+	pr_debug("amvideocap module removed.\n");
 }
 
 module_init(amvideocap_init_module);
