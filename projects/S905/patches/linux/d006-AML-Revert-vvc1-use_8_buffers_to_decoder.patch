diff --git a/drivers/amlogic/amports/arch/ucode/vc1/vc1_vc1_linux.h b/drivers/amlogic/amports/arch/ucode/vc1/vc1_vc1_linux.h
index 11159b4..e662a5f 100644
--- a/drivers/amlogic/amports/arch/ucode/vc1/vc1_vc1_linux.h
+++ b/drivers/amlogic/amports/arch/ucode/vc1/vc1_vc1_linux.h
@@ -16,42 +16,42 @@
 */
 
 static const u32 MicroCode[] __initconst = {
-	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x0c0148c0,
+	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x0c014600,
 	0x06800024, 0x00000000, 0x00000000, 0x080c0002, 0x080c1e01,
-	0x06bfde80, 0x07c017c0, 0x06030400, 0x00400000, 0x0c015880,
+	0x06bfde80, 0x07c017c0, 0x06030400, 0x00400000, 0x0c0154c0,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x0c7ffe80, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x0c780580, 0x064c0007, 0x0c795a00, 0x06800024,
+	0x00400000, 0x0c780580, 0x064c0007, 0x0c795640, 0x06800024,
 	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x0c79e740, 0x00000000, 0x0cc00000, 0x00400000,
+	0x00400000, 0x0c79e380, 0x00000000, 0x0cc00000, 0x00400000,
 	0x04001924, 0x0c7fff40, 0x0609c724, 0x06800024, 0x00800000,
 	0x078017c9, 0x0c7ffe00, 0x06030409, 0x06bfdd89, 0x06030409,
 	0x00400000, 0x0a2e0047, 0x07801509, 0x0aa14009, 0x0a608049,
-	0x0c78fb40, 0x0a608089, 0x0c78ecc0, 0x0a220807, 0x0c787d40,
-	0x00000000, 0x06800007, 0x0c0067c0, 0x07c003c7, 0x0c7933c0,
+	0x0c78fb80, 0x0a608089, 0x0c78ecc0, 0x0a220807, 0x0c787d40,
+	0x00000000, 0x06800007, 0x0c0067c0, 0x07c003c7, 0x0c793100,
 	0x00000000, 0x0bee9007, 0x078003c7, 0x0a6fc007, 0x06800008,
 	0x07800007, 0x0a644007, 0x07c00208, 0x064c2907, 0x091c11c7,
 	0x0a634047, 0x07800347, 0x0a22d007, 0x0aa20020, 0x0aa0c0a0,
 	0x07802987, 0x0a60c0c8, 0x078000c7, 0x0a614007, 0x07800107,
-	0x0a60c007, 0x0c792e40, 0x00000000, 0x0cb8002d, 0x00000000,
+	0x0a60c007, 0x0c792b80, 0x00000000, 0x0cb8002d, 0x00000000,
 	0x07800087, 0x060c2307, 0x06800007, 0x07c00147, 0x04c001c7,
 	0x060c2107, 0x068fdfca, 0x064e0408, 0x02808288, 0x02c08948,
 	0x060e0408, 0x060c0726, 0x06800008, 0x07800507, 0x09582207,
 	0x098083c8, 0x06c00308, 0x060e0508, 0x080c25a0, 0x080c2601,
 	0x078020c8, 0x0a6100c8, 0x080c2602, 0x080c2603, 0x080c2604,
-	0x0c01d0c0, 0x080c260e, 0x0c01c800, 0x00000000, 0x0683ffc8,
+	0x0c01cd00, 0x080c260e, 0x0c01c440, 0x00000000, 0x0683ffc8,
 	0x064c2307, 0x093041c7, 0x0aa0c007, 0x0b6f4048, 0x04401208,
 	0x07800007, 0x040011c7, 0x07c00007, 0x09c253a5, 0x07800988,
 	0x0b405207, 0x040011c7, 0x0b824207, 0x0c7808c0, 0x098251e5,
 	0x06800007, 0x07c00007, 0x098253a5, 0x09c253e5, 0x09c251e5,
 	0x078016c8, 0x04001208, 0x078009c9, 0x0b410248, 0x07c016c8,
-	0x0be5c7c8, 0x078000c7, 0x0aa0c007, 0x0c021100, 0x0680000a,
-	0x07800107, 0x0aa0c007, 0x0c021000, 0x0680004a, 0x07800bc7,
-	0x0aa34007, 0x0c020f00, 0x0680008a, 0x0c780280, 0x078003c7,
+	0x0be5c7c8, 0x078000c7, 0x0aa0c007, 0x0c020d40, 0x0680000a,
+	0x07800107, 0x0aa0c007, 0x0c020c40, 0x0680004a, 0x07800bc7,
+	0x0aa34007, 0x0c020b40, 0x0680008a, 0x0c780280, 0x078003c7,
 	0x0a6fc007, 0x00000000, 0x06430507, 0x0a2f0107, 0x06a00008,
-	0x060c3d08, 0x0c791a40, 0x00000000, 0x07800007, 0x09508987,
+	0x060c3d08, 0x0c791780, 0x00000000, 0x07800007, 0x09508987,
 	0x078016c9, 0x09408989, 0x0680000b, 0x0481f249, 0x05403249,
 	0x07800007, 0x0480f207, 0x068003ca, 0x0240a20a, 0x058041c7,
 	0x020091c9, 0x06804007, 0x020091c9, 0x078000c7, 0x0a60c007,
@@ -69,8 +69,8 @@ static const u32 MicroCode[] __initconst = {
 	0x0aa20008, 0x00000000, 0x080c2590, 0x080c2607, 0x080c2601,
 	0x080c2604, 0x0c780180, 0x080c2602, 0x080c2500, 0x080c2607,
 	0x080c2604, 0x080c2602, 0x07802c08, 0x04c28208, 0x09808208,
-	0x060c2108, 0x0c01ad80, 0x080c260e, 0x0c01a4c0, 0x00000000,
-	0x0c7fdd00, 0x00000000, 0x0c7ffd80, 0x080c2560, 0x0c7901c0,
+	0x060c2108, 0x0c01a9c0, 0x080c260e, 0x0c01a100, 0x00000000,
+	0x0c7fdd00, 0x00000000, 0x0c7ffd80, 0x080c2560, 0x0c78ff00,
 	0x00000000, 0x06800048, 0x07c00148, 0x04c00208, 0x0be68207,
 	0x07800207, 0x0aae4047, 0x060c2108, 0x080c2560, 0x0683ffc9,
 	0x064c2307, 0x09304207, 0x0aa10008, 0x091421c7, 0x0b6f0049,
@@ -98,8 +98,8 @@ static const u32 MicroCode[] __initconst = {
 	0x07c00148, 0x04c00208, 0x0be20207, 0x07800207, 0x0aa4c047,
 	0x060c2108, 0x080c2500, 0x080c2607, 0x0c780140, 0x080c2604,
 	0x060c2108, 0x080c2b00, 0x080c2560, 0x07802c08, 0x04c28208,
-	0x09808208, 0x060c2108, 0x0c018900, 0x080c260e, 0x0c018040,
-	0x00000000, 0x0c7fb880, 0x00000000, 0x0c78ddc0, 0x00000000,
+	0x09808208, 0x060c2108, 0x0c018540, 0x080c260e, 0x0c017c80,
+	0x00000000, 0x0c7fb880, 0x00000000, 0x0c78db00, 0x00000000,
 	0x07800208, 0x0aaf4048, 0x06800048, 0x07c00148, 0x04c00208,
 	0x0be20207, 0x060c2108, 0x080c2560, 0x080c2609, 0x080c2602,
 	0x080c2601, 0x0c7ffa40, 0x080c2604, 0x080c2b00, 0x0c7ff980,
@@ -109,7 +109,7 @@ static const u32 MicroCode[] __initconst = {
 	0x06c00308, 0x060e0508, 0x080c2540, 0x080c2606, 0x064c2307,
 	0x093041c7, 0x0a6f8007, 0x00000000, 0x064c2307, 0x0a228107,
 	0x091421c7, 0x068000c8, 0x07c00148, 0x04c00208, 0x080c2570,
-	0x0c7fcb00, 0x080c260a, 0x0c78d180, 0x00000000, 0x07800208,
+	0x0c7fcb00, 0x080c260a, 0x0c78cec0, 0x00000000, 0x07800208,
 	0x0aaf4048, 0x06800048, 0x07c00148, 0x04c00208, 0x0be20047,
 	0x060c2108, 0x080c2570, 0x080c2607, 0x080c2602, 0x080c2601,
 	0x0c7fee00, 0x080c2604, 0x080c2530, 0x080c2607, 0x080c2602,
@@ -135,14 +135,14 @@ static const u32 MicroCode[] __initconst = {
 	0x0980a34a, 0x060c080a, 0x0c07f580, 0x00000000, 0x080e1600,
 	0x0680000a, 0x07c003ca, 0x07800647, 0x0aa20007, 0x00000000,
 	0x0fc08280, 0x06801007, 0x07c00347, 0x06809409, 0x0c781580,
-	0x060c0809, 0x064c1a07, 0x0b210007, 0x06800008, 0x0c78b080,
+	0x060c0809, 0x064c1a07, 0x0b210007, 0x06800008, 0x0c78adc0,
 	0x00000000, 0x0fc08280, 0x0fc081c0, 0x07c00347, 0x020081c8,
 	0x0a20d007, 0x06800409, 0x06809409, 0x060c0809, 0x0fc081c0,
 	0x020081c8, 0x05410247, 0x0fc081c0, 0x0a646207, 0x020081c8,
 	0x0fc081c0, 0x020081c8, 0x09508247, 0x0fc081c0, 0x020081c8,
 	0x09408247, 0x07c02e09, 0x058101c9, 0x07c02f07, 0x04010249,
 	0x05403249, 0x060c1a09, 0x0fc081c0, 0x0aa1a207, 0x020081c8,
-	0x07802007, 0x060c0807, 0x0c78a840, 0x060c1a1f, 0x0fc081c0,
+	0x07802007, 0x060c0807, 0x0c78a580, 0x060c1a1f, 0x0fc081c0,
 	0x020081c8, 0x05408247, 0x0fc081c0, 0x020081c8, 0x09408247,
 	0x07c02049, 0x0fc081c0, 0x0a6d2207, 0x020081c8, 0x0fc081c0,
 	0x020081c8, 0x05408247, 0x0fc081c0, 0x020081c8, 0x09408247,
@@ -153,9 +153,9 @@ static const u32 MicroCode[] __initconst = {
 	0x07c01407, 0x07802507, 0x0aa0c047, 0x06800087, 0x06800047,
 	0x07c024c7, 0x06800047, 0x0c783000, 0x07c004c7, 0x0c782480,
 	0x0aa4c3ca, 0x0aaf838a, 0x0aacc30a, 0x0a61034a, 0x06800007,
-	0x0c782e00, 0x07c004c7, 0x0a6082ca, 0x0c788fc0, 0x0a62040a,
+	0x0c782e00, 0x07c004c7, 0x0a6082ca, 0x0c788d00, 0x0a62040a,
 	0x00000000, 0x0fc101c0, 0x07c02107, 0x07c02187, 0x0fc101c0,
-	0x0c780100, 0x07c021c7, 0x0c789800, 0x00000000, 0x06800047,
+	0x0c780100, 0x07c021c7, 0x0c789540, 0x00000000, 0x06800047,
 	0x07c00447, 0x06800007, 0x07c00247, 0x0fc02280, 0x07c020ca,
 	0x054011ca, 0x04c011c7, 0x060c1e07, 0x0aa140ca, 0x00000000,
 	0x0fc021c0, 0x0c780100, 0x00000000, 0x0fc031c0, 0x0fc021c0,
@@ -174,13 +174,13 @@ static const u32 MicroCode[] __initconst = {
 	0x0c7801c0, 0x0680080a, 0x0fc081c0, 0x0fc041c0, 0x0aa0c047,
 	0x0680fa0a, 0x0680fa4a, 0x0fc011c0, 0x0aa14007, 0x00000000,
 	0x0fc081c0, 0x0fc081c0, 0x0fc081c0, 0x0fc011c0, 0x0a60c007,
-	0x0c7800c0, 0x06800008, 0x0fc05200, 0x07c02348, 0x0c787fc0,
+	0x0c7800c0, 0x06800008, 0x0fc05200, 0x07c02348, 0x0c787d00,
 	0x00000000, 0x0fc011c0, 0x07c00047, 0x0fc011c0, 0x0fc011c0,
 	0x07c02d07, 0x0fc011c0, 0x0fc011c0, 0x07c02c47, 0x0fc011c0,
 	0x07c02907, 0x0fc021c0, 0x07c023c7, 0x0fc011c0, 0x07c02b87,
 	0x0fc011c0, 0x0fc011c0, 0x07c02447, 0x0fc011c0, 0x07c02d47,
 	0x0fc011c0, 0x07c02d87, 0x0fc031c0, 0x07c02dc7, 0x0fc021c0,
-	0x07c02407, 0x0fc011c0, 0x07c022c7, 0x0c787880, 0x0fc011c0,
+	0x07c02407, 0x0fc011c0, 0x07c022c7, 0x0c7875c0, 0x0fc011c0,
 	0x0fc011c0, 0x0fc011c0, 0x0fc011c0, 0x07c02387, 0x0fc011c0,
 	0x07c00447, 0x0fc011c0, 0x07c00047, 0x0fc011c0, 0x07c02c47,
 	0x0fc011c0, 0x07c02907, 0x0fc021c0, 0x07c023c7, 0x0fc011c0,
@@ -189,99 +189,96 @@ static const u32 MicroCode[] __initconst = {
 	0x04401208, 0x0fc011c0, 0x0aa28007, 0x00000000, 0x0fc0c1c0,
 	0x040011c7, 0x054011c7, 0x07c02187, 0x0fc0c1c0, 0x040011c7,
 	0x054011c7, 0x07c021c7, 0x07802907, 0x0aa0c007, 0x06800007,
-	0x0fc011c0, 0x07c00a07, 0x0c786d80, 0x00000000, 0x06800048,
+	0x0fc011c0, 0x07c00a07, 0x0c786ac0, 0x00000000, 0x06800048,
 	0x07c01408, 0x064c510a, 0x064c4607, 0x078007c8, 0x05410208,
 	0x07800789, 0x02008248, 0x0580a208, 0x0e000288, 0x00000000,
 	0x00000000, 0x00000000, 0x0f000200, 0x0f010280, 0x0970820a,
 	0x0540a208, 0x020081c8, 0x064c430a, 0x02408288, 0x064c400a,
-	0x02408288, 0x07c00808, 0x05810208, 0x07c00848, 0x07801747,
-	0x040011c7, 0x07c01747, 0x06bff127, 0x06fff127, 0x06800026,
+	0x02408288, 0x07c00808, 0x05810208, 0x07c00848, 0x07801347,
+	0x040011c7, 0x07c01347, 0x06bff127, 0x06fff127, 0x06800026,
 	0x07c00026, 0x07c016e6, 0x098253a6, 0x098253e5, 0x09c251e5,
-	0x07802187, 0x0a608007, 0x0c786380, 0x0400f1c7, 0x058041c7,
+	0x07802187, 0x0a608007, 0x0c7860c0, 0x0400f1c7, 0x058041c7,
 	0x05404b87, 0x04401bae, 0x05402bae, 0x060c0907, 0x07c00987,
 	0x04401247, 0x07c00609, 0x09708989, 0x05404287, 0x078021c8,
-	0x0a608008, 0x0c786000, 0x0400f208, 0x05804208, 0x05404248,
+	0x0a608008, 0x0c785d40, 0x0400f208, 0x05804208, 0x05404248,
 	0x04401249, 0x05402249, 0x09610b89, 0x07c009c8, 0x04401248,
 	0x09608989, 0x04000248, 0x09610247, 0x06095209, 0x05404208,
 	0x078020c7, 0x0a6100c7, 0x00000000, 0x0780218a, 0x078021c8,
 	0x0961020a, 0x06090808, 0x06800007, 0x07c00507, 0x06800047,
 	0x07c00587, 0x07800607, 0x040011c7, 0x07c005c7, 0x078020c7,
-	0x0aa080c7, 0x0c784940, 0x078004c7, 0x0a624007, 0x078003a0,
-	0x0c020640, 0x00000000, 0x0c01f940, 0x00000000, 0x0aa14008,
-	0x0c785640, 0x00000000, 0x0c020840, 0x00000000, 0x078024c8,
+	0x0aa080c7, 0x0c784680, 0x078004c7, 0x0a624007, 0x078003a0,
+	0x0c020280, 0x00000000, 0x0c01f580, 0x00000000, 0x0aa14008,
+	0x0c785380, 0x00000000, 0x0c020480, 0x00000000, 0x078024c8,
 	0x05406208, 0x07800247, 0x09482207, 0x09403220, 0x060c0408,
-	0x068b8008, 0x07c00288, 0x0c005c00, 0x07c017a0, 0x0c0151c0,
+	0x0687c008, 0x07c00288, 0x0c005840, 0x07c013e0, 0x0c014e00,
 	0x06800008, 0x06a00008, 0x07802c87, 0x09610207, 0x060c3d08,
 	0x064c3d08, 0x09161208, 0x0a6f8008, 0x078002c8, 0x0aa14008,
 	0x06bfffc8, 0x060c3908, 0x0c780480, 0x060c3808, 0x06800008,
-	0x06c0bc08, 0x078004c9, 0x0aa10009, 0x06800009, 0x06c00049,
+	0x06c07e08, 0x078004c9, 0x0aa10009, 0x06a00009, 0x06c00009,
 	0x02008248, 0x0aa180a0, 0x020088c8, 0x060c3808, 0x06bfffc8,
 	0x0c780140, 0x060c3908, 0x060c3908, 0x06bfffc8, 0x060c3808,
-	0x0c006980, 0x00000000, 0x0c020e00, 0x00000000, 0x080e1600,
-	0x078004c7, 0x0aa0c007, 0x0c782b00, 0x00000000, 0x0649c909,
+	0x0c0065c0, 0x00000000, 0x0c020a40, 0x00000000, 0x080e1600,
+	0x078004c7, 0x0aa0c007, 0x0c782840, 0x00000000, 0x0649c909,
 	0x0aa10009, 0x06800087, 0x0c7f0f00, 0x07c01507, 0x07801487,
-	0x0a608007, 0x0c780c40, 0x044011c7, 0x0aa0c087, 0x07801549,
-	0x078015c9, 0x0b20c1c9, 0x00000000, 0x0c780a80, 0x0649c808,
+	0x0a608007, 0x0c780c80, 0x044011c7, 0x0aa0c087, 0x07801549,
+	0x078015c9, 0x0b20c0c9, 0x00000000, 0x0c780ac0, 0x0649c808,
 	0x0aa14008, 0x078014c7, 0x02807207, 0x07c014c7, 0x0809c800,
-	0x040301c9, 0x070001c7, 0x054101c7, 0x04038209, 0x07000208,
-	0x094101c8, 0x0609cb07, 0x040481c9, 0x070001c7, 0x054101c7,
+	0x040301c9, 0x070001c7, 0x054101c7, 0x04034209, 0x07000208,
+	0x094101c8, 0x0609cb07, 0x040441c9, 0x070001c7, 0x054101c7,
 	0x04040209, 0x07000208, 0x094101c8, 0x0609cc07, 0x040621c9,
-	0x070001c7, 0x0609d307, 0x0406a1c9, 0x070001c7, 0x0609d407,
-	0x040c81c9, 0x070001c7, 0x078034c8, 0x020081c8, 0x0609ca08,
-	0x07c034df, 0x040c0209, 0x07000208, 0x09464248, 0x07802248,
-	0x094e1248, 0x0609c909, 0x08007401, 0x06800009, 0x07c01489,
-	0x06800009, 0x07c01509, 0x078014c7, 0x02c07247, 0x04000294,
-	0x0a268047, 0x06800008, 0x0400029b, 0x0a25c087, 0x06800048,
-	0x0400029c, 0x0a250107, 0x06800088, 0x0400029d, 0x0a244207,
-	0x068000c8, 0x040002b2, 0x0a238407, 0x06800108, 0x040002b3,
-	0x0a22c807, 0x06800148, 0x040002b4, 0x0a221007, 0x06800188,
-	0x040002b5, 0x0a216007, 0x068001c8, 0x06800047, 0x0c7efa80,
-	0x07c01507, 0x07801607, 0x090041c7, 0x0a8071c8, 0x078002c7,
-	0x0aa08047, 0x0a6200a0, 0x07801607, 0x090841c7, 0x0a4051c8,
-	0x06800047, 0x03407207, 0x0c7ff600, 0x02c091c9, 0x07800807,
-	0x04040248, 0x07400247, 0x07800847, 0x04008249, 0x07400247,
-	0x07802187, 0x04062248, 0x07400247, 0x078021c7, 0x0406a248,
-	0x07400247, 0x07801847, 0x054031c7, 0x02c07807, 0x040c0248,
-	0x07400247, 0x040301c8, 0x07803449, 0x074001c9, 0x040381c8,
-	0x07803409, 0x0a60c060, 0x074001c9, 0x04000848, 0x0a6200a0,
-	0x040c81c8, 0x074001df, 0x07000889, 0x0aa1c009, 0x04401249,
-	0x0c780140, 0x07400889, 0x07803489, 0x074001c9, 0x04000887,
-	0x07c0349f, 0x06800047, 0x03407207, 0x078014c9, 0x02c091c9,
-	0x07c014c9, 0x06803507, 0x02007207, 0x07802e49, 0x074001c9,
-	0x0609b20a, 0x0609b00a, 0x0609b10a, 0x078002c9, 0x0aa0c049,
-	0x068000c9, 0x04001260, 0x07c01489, 0x078002c9, 0x0aa38049,
-	0x0a6080a0, 0x0c780300, 0x07801587, 0x07c015c7, 0x07c01588,
-	0x04000aec, 0x07801609, 0x05404249, 0x09404248, 0x07c01609,
-	0x04000b0a, 0x0c7800c0, 0x00000000, 0x07c01548, 0x078020c8,
-	0x0aa1c0c8, 0x0aa180a0, 0x0aa10020, 0x06800047, 0x07800307,
-	0x044011c7, 0x07c00307, 0x07800187, 0x0b624087, 0x06800048,
-	0x0aa240a0, 0x0aa08020, 0x0aa1c007, 0x078004c9, 0x0a60c009,
-	0x040011c7, 0x07c00187, 0x0c780180, 0x07c001c8, 0x06800008,
-	0x07c001c8, 0x0c7818c0, 0x00000000, 0x0680192d, 0x0aa34020,
-	0x0aa180a0, 0x07800247, 0x0a628047, 0x0680366d, 0x0c780200,
-	0x06804eed, 0x07800247, 0x0aa14007, 0x06805c6d, 0x0aa0c087,
-	0x06806d2d, 0x06804eed, 0x064c1e07, 0x04c181c7, 0x060c1e07,
-	0x0c003440, 0x00000000, 0x0c01d9c0, 0x00000000, 0x064c1e08,
-	0x07800247, 0x0a618087, 0x09c08408, 0x07800547, 0x0a60c007,
-	0x00000000, 0x09808408, 0x060c1e08, 0x0c01de40, 0x00000000,
-	0x0c01f980, 0x00000000, 0x0cb8002d, 0x00000000, 0x07800347,
-	0x0be19007, 0x07802e07, 0x07802f08, 0x096101c8, 0x0ae08047,
-	0x0c780dc0, 0x078022c7, 0x0aa0c007, 0x00000000, 0x0fc011c0,
-	0x0fc021c0, 0x07802d87, 0x0aa0c007, 0x06800208, 0x0fc011c0,
-	0x07c02e47, 0x0c7fb400, 0x00000000, 0x06800007, 0x07c01407,
-	0x078001c7, 0x0a60c007, 0x0c780980, 0x00000000, 0x0fc091c0,
-	0x078024c8, 0x0a60c088, 0x078009c8, 0x02407207, 0x078016c8,
-	0x0a802207, 0x07c016c7, 0x0fc011c0, 0x0aa50007, 0x0c01b540,
-	0x00000000, 0x078004c7, 0x0aa18007, 0x07802507, 0x0aa0c047,
-	0x06800087, 0x06800047, 0x07c024c7, 0x0c01a680, 0x00000000,
-	0x078004c7, 0x0aa0c007, 0x00000000, 0x078003a0, 0x0aa08008,
-	0x0c780280, 0x0c010140, 0x06800048, 0x098253a5, 0x098253e5,
-	0x09c251e5, 0x0c7fec40, 0x00000000, 0x0c7ecbc0, 0x00000000,
-	0x0683ffc9, 0x04401249, 0x0aaf0009, 0x064c0007, 0x0a2f4047,
-	0x00000000, 0x064c3a07, 0x090061c7, 0x0aae4647, 0x00000000,
-	0x080c2800, 0x080c0002, 0x0c7ec400, 0x00000000, 0x06b21000,
-	0x07c01440, 0x0649c014, 0x0649c11b, 0x0649c21c, 0x0649c31d,
-	0x0649d032, 0x0649d133, 0x0649d234, 0x0649d335, 0x0680402b,
+	0x070001c7, 0x0609d307, 0x040661c9, 0x070001c7, 0x0609d407,
+	0x040381c9, 0x070001c7, 0x07800fc8, 0x020081c8, 0x0609ca08,
+	0x07c00fdf, 0x04029209, 0x04001249, 0x07000208, 0x09464248,
+	0x07802248, 0x094e1248, 0x0609c909, 0x08007401, 0x06800009,
+	0x07c01489, 0x06800009, 0x07c01509, 0x078014c7, 0x02c07247,
+	0x04000294, 0x0a238047, 0x06800008, 0x0400029b, 0x0a22c087,
+	0x06800048, 0x0400029c, 0x0a220107, 0x06800088, 0x0400029d,
+	0x0a214207, 0x068000c8, 0x06800047, 0x0c7efd40, 0x07c01507,
+	0x07801607, 0x090041c7, 0x0a8071c8, 0x078002c7, 0x0aa08047,
+	0x0a6200a0, 0x07801607, 0x090841c7, 0x0a4051c8, 0x06800047,
+	0x03407207, 0x0c7ff900, 0x02c091c9, 0x07800807, 0x04040248,
+	0x07400247, 0x07800847, 0x04004249, 0x07400247, 0x07802187,
+	0x04062248, 0x07400247, 0x078021c7, 0x04066248, 0x07400247,
+	0x07801847, 0x054031c7, 0x02c07807, 0x04029248, 0x07400247,
+	0x040301c8, 0x07800f49, 0x074001c9, 0x040341c8, 0x07800f09,
+	0x0a60c060, 0x074001c9, 0x04000848, 0x0a6200a0, 0x040381c8,
+	0x074001df, 0x07000889, 0x0aa1c009, 0x04401249, 0x0c780140,
+	0x07400889, 0x07800f89, 0x074001c9, 0x04000887, 0x07c00f9f,
+	0x06800047, 0x03407207, 0x078014c9, 0x02c091c9, 0x07c014c9,
+	0x06800687, 0x02007207, 0x07802e49, 0x074001c9, 0x0609b20a,
+	0x0609b00a, 0x0609b10a, 0x078002c9, 0x0aa0c049, 0x068000c9,
+	0x04001260, 0x07c01489, 0x078002c9, 0x0aa38049, 0x0a6080a0,
+	0x0c780300, 0x07801587, 0x07c015c7, 0x07c01588, 0x04000aec,
+	0x07801609, 0x05404249, 0x09404248, 0x07c01609, 0x04000b0a,
+	0x0c7800c0, 0x00000000, 0x07c01548, 0x078020c8, 0x0aa1c0c8,
+	0x0aa180a0, 0x0aa10020, 0x06800047, 0x07800307, 0x044011c7,
+	0x07c00307, 0x07800187, 0x0b624087, 0x06800048, 0x0aa240a0,
+	0x0aa08020, 0x0aa1c007, 0x078004c9, 0x0a60c009, 0x040011c7,
+	0x07c00187, 0x0c780180, 0x07c001c8, 0x06800008, 0x07c001c8,
+	0x0c7818c0, 0x00000000, 0x0680192d, 0x0aa34020, 0x0aa180a0,
+	0x07800247, 0x0a628047, 0x0680366d, 0x0c780200, 0x06804eed,
+	0x07800247, 0x0aa14007, 0x06805c6d, 0x0aa0c087, 0x06806d2d,
+	0x06804eed, 0x064c1e07, 0x04c181c7, 0x060c1e07, 0x0c003340,
+	0x00000000, 0x0c01d8c0, 0x00000000, 0x064c1e08, 0x07800247,
+	0x0a618087, 0x09c08408, 0x07800547, 0x0a60c007, 0x00000000,
+	0x09808408, 0x060c1e08, 0x0c01dd40, 0x00000000, 0x0c01f880,
+	0x00000000, 0x0cb8002d, 0x00000000, 0x07800347, 0x0be19007,
+	0x07802e07, 0x07802f08, 0x096101c8, 0x0ae08047, 0x0c780dc0,
+	0x078022c7, 0x0aa0c007, 0x00000000, 0x0fc011c0, 0x0fc021c0,
+	0x07802d87, 0x0aa0c007, 0x06800208, 0x0fc011c0, 0x07c02e47,
+	0x0c7fb6c0, 0x00000000, 0x06800007, 0x07c01407, 0x078001c7,
+	0x0a60c007, 0x0c780980, 0x00000000, 0x0fc091c0, 0x078024c8,
+	0x0a60c088, 0x078009c8, 0x02407207, 0x078016c8, 0x0a802207,
+	0x07c016c7, 0x0fc011c0, 0x0aa50007, 0x0c01b440, 0x00000000,
+	0x078004c7, 0x0aa18007, 0x07802507, 0x0aa0c047, 0x06800087,
+	0x06800047, 0x07c024c7, 0x0c01a580, 0x00000000, 0x078004c7,
+	0x0aa0c007, 0x00000000, 0x078003a0, 0x0aa08008, 0x0c780280,
+	0x0c010040, 0x06800048, 0x098253a5, 0x098253e5, 0x09c251e5,
+	0x0c7fec40, 0x00000000, 0x0c7ece80, 0x00000000, 0x0683ffc9,
+	0x04401249, 0x0aaf0009, 0x064c0007, 0x0a2f4047, 0x00000000,
+	0x064c3a07, 0x090061c7, 0x0aae4647, 0x00000000, 0x080c2800,
+	0x080c0002, 0x0c7ec6c0, 0x00000000, 0x06b21000, 0x07c01440,
+	0x0649c014, 0x0649c11b, 0x0649c21c, 0x0649c31d, 0x0680402b,
 	0x0681412c, 0x0c000440, 0x00000000, 0x08002501, 0x08002605,
 	0x08002708, 0x08002815, 0x08002c14, 0x0cc00000, 0x00000000,
 	0x06800007, 0x07c000c7, 0x07c00107, 0x07c00bc7, 0x07c00207,
@@ -299,20 +296,20 @@ static const u32 MicroCode[] __initconst = {
 	0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800, 0x00400000,
 	0x07801502, 0x0aa0c002, 0x06800102, 0x06030502, 0x0b60c224,
 	0x0cc00000, 0x00000000, 0x00800000, 0x00000000, 0x06800007,
-	0x0c071800, 0x07c003c7, 0x080c2800, 0x080c0002, 0x06800024,
+	0x0c071bc0, 0x07c003c7, 0x080c2800, 0x080c0002, 0x06800024,
 	0x0cc00000, 0x00400000, 0x064c441a, 0x0912169a, 0x0aaf801a,
-	0x0c7ea7c0, 0x00000000, 0x0683ffe9, 0x04401a69, 0x0aa0c029,
+	0x0c7eab80, 0x00000000, 0x0683ffe9, 0x04401a69, 0x0aa0c029,
 	0x0649092a, 0x0bef406a, 0x0cc00000, 0x00000000, 0x0c07fe40,
 	0x00000000, 0x06800168, 0x0649072a, 0x09503aa8, 0x07800328,
 	0x09421aa8, 0x07800268, 0x0aa0c0a8, 0x0982a0ea, 0x09c2a0ea,
 	0x078029a8, 0x0a60c028, 0x06d1412a, 0x0982a7ea, 0x0609072a,
 	0x06490b2a, 0x0982a02a, 0x06090b2a, 0x09c2a02a, 0x0982a52a,
 	0x0982a56a, 0x0982a5aa, 0x078020e8, 0x0aa0c0e8, 0x06800029,
-	0x06800069, 0x095c1aa9, 0x07800268, 0x0a63c0a8, 0x06803528,
+	0x06800069, 0x095c1aa9, 0x07800268, 0x0a63c0a8, 0x068006a8,
 	0x078015e9, 0x06800029, 0x02029a68, 0x07000a68, 0x09541aa8,
-	0x06803528, 0x078015a9, 0x06800029, 0x02029a68, 0x07000a68,
-	0x09561aa8, 0x0c780340, 0x0982a4ea, 0x06803528, 0x078015e9,
-	0x02029a68, 0x07000a68, 0x09541aa8, 0x06803528, 0x078015a9,
+	0x068006a8, 0x078015a9, 0x06800029, 0x02029a68, 0x07000a68,
+	0x09561aa8, 0x0c780340, 0x0982a4ea, 0x068006a8, 0x078015e9,
+	0x02029a68, 0x07000a68, 0x09541aa8, 0x068006a8, 0x078015a9,
 	0x02029a68, 0x07000a68, 0x09561aa8, 0x09c2a4ea, 0x06090b2a,
 	0x07801428, 0x0aa0c068, 0x0c784680, 0x00000000, 0x0680000d,
 	0x078029ce, 0x078002e8, 0x0aa1c068, 0x0a618020, 0x00000000,
@@ -348,7 +345,7 @@ static const u32 MicroCode[] __initconst = {
 	0x06804010, 0x06808010, 0x06800088, 0x0a80320f, 0x06800051,
 	0x06800011, 0x040001d0, 0x0680c008, 0x04000251, 0x0c003980,
 	0x00000000, 0x040801d0, 0x0680e008, 0x04000251, 0x0c003840,
-	0x00000000, 0x07800b87, 0x0a64c007, 0x07800a47, 0x07800a88,
+	0x00000000, 0x07800b87, 0x0a64c007, 0x07801207, 0x07801248,
 	0x0680070c, 0x0c001f40, 0x00000000, 0x0aa0c08f, 0x06800051,
 	0x06800011, 0x06808007, 0x0680c008, 0x04000251, 0x0c003480,
 	0x00000000, 0x0680a007, 0x0680e008, 0x04000251, 0x0c003340,
@@ -371,7 +368,7 @@ static const u32 MicroCode[] __initconst = {
 	0x078002c7, 0x0aa34047, 0x07800247, 0x0aa0c087, 0x06800048,
 	0x06800088, 0x07801447, 0x091c2247, 0x054041c7, 0x094421c9,
 	0x04401208, 0x0a6f0008, 0x00000000, 0x07c01447, 0x0cc00000,
-	0x00000000, 0x06035209, 0x06a00009, 0x06c0bc89, 0x020098c9,
+	0x00000000, 0x06035209, 0x06ac0009, 0x06c07e49, 0x020098c9,
 	0x054011c7, 0x02007247, 0x06035107, 0x098083c8, 0x095c120a,
 	0x06035008, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000,
 	0x00000000, 0x0906238c, 0x0540838e, 0x0a628007, 0x00000000,
@@ -458,22 +455,22 @@ static const u32 MicroCode[] __initconst = {
 	0x09708247, 0x078009c7, 0x09608247, 0x060e1809, 0x064e1809,
 	0x0befc049, 0x0c780240, 0x06800049, 0x07800987, 0x09708247,
 	0x078009c7, 0x09608247, 0x060e1809, 0x064e1809, 0x0befc049,
-	0x06800007, 0x06c0bc87, 0x0aa2400a, 0x020078c7, 0x06840007,
-	0x06c0bc87, 0x0aa1404a, 0x020078c7, 0x06880007, 0x06c0bc87,
+	0x06800007, 0x06c07e47, 0x0aa2400a, 0x020078c7, 0x06840007,
+	0x06c07e47, 0x0aa1404a, 0x020078c7, 0x06880007, 0x06c07e47,
 	0x020078c7, 0x060e1307, 0x068003c9, 0x07800987, 0x09708247,
 	0x078009c7, 0x09608247, 0x060e1809, 0x064e1807, 0x0befc047,
 	0x00000000, 0x0649d907, 0x0900c1c7, 0x0a6f8007, 0x06b04009,
-	0x06800007, 0x06c0bc87, 0x0aa2c00a, 0x020078c7, 0x06840007,
-	0x06c0bc87, 0x020078c7, 0x0aa1804a, 0x06b08009, 0x06880007,
-	0x06c0bc87, 0x020078c7, 0x06b0c009, 0x06035107, 0x06804007,
+	0x06800007, 0x06c07e47, 0x0aa2c00a, 0x020078c7, 0x06840007,
+	0x06c07e47, 0x020078c7, 0x0aa1804a, 0x06b08009, 0x06880007,
+	0x06c07e47, 0x020078c7, 0x06b0c009, 0x06035107, 0x06804007,
 	0x06035207, 0x06035009, 0x06435007, 0x0580f1c7, 0x0bef8047,
 	0x0900b249, 0x07000247, 0x091e11c7, 0x07800089, 0x0aa1c00a,
 	0x0680004b, 0x0aa2004a, 0x00000000, 0x07c00bcb, 0x0c7801c0,
 	0x095e1247, 0x07c000cb, 0x0c780100, 0x095a1247, 0x07c0010b,
 	0x095c1247, 0x07c00089, 0x0cc00000, 0x00000000, 0x06b04009,
-	0x06800007, 0x06c0bc87, 0x0aa3000a, 0x020078c7, 0x06840007,
-	0x06c0bc87, 0x020078c7, 0x0aa1c04a, 0x06b08009, 0x06880007,
-	0x06c0bc87, 0x020078c7, 0x0aa0804a, 0x06b0c009, 0x05404288,
+	0x06800007, 0x06c07e47, 0x0aa3000a, 0x020078c7, 0x06840007,
+	0x06c07e47, 0x020078c7, 0x0aa1c04a, 0x06b08009, 0x06880007,
+	0x06c07e47, 0x020078c7, 0x0aa0804a, 0x06b0c009, 0x05404288,
 	0x02007287, 0x06035107, 0x06804007, 0x06035207, 0x06035009,
 	0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000, 0x00000000,
 	0x07802407, 0x0a628007, 0x078025c7, 0x0b220207, 0x0b21c707,
@@ -542,19 +539,19 @@ static const u32 MicroCode[] __initconst = {
 	0x0aa68009, 0x00000000, 0x07800247, 0x0a64c087, 0x00000000,
 	0x0fc011c0, 0x0a610007, 0x06800008, 0x0fc011c0, 0x04001207,
 	0x07c00b88, 0x0fc061c0, 0x07c02a07, 0x0fc061c0, 0x07c02a47,
-	0x0a62c008, 0x00000000, 0x0fc061c0, 0x07c00a47, 0x0fc061c0,
-	0x0c780180, 0x07c00a87, 0x0fc061c0, 0x07c02a07, 0x0fc061c0,
+	0x0a62c008, 0x00000000, 0x0fc061c0, 0x07c01207, 0x0fc061c0,
+	0x0c780180, 0x07c01247, 0x0fc061c0, 0x07c02a07, 0x0fc061c0,
 	0x07c02a47, 0x07800247, 0x0aa14007, 0x0a608087, 0x0c780bc0,
 	0x0aa100a0, 0x0c780840, 0x0c781240, 0x00000000, 0x0c077040,
 	0x0680000a, 0x07c02cc8, 0x0c076f80, 0x0680004a, 0x07c02ac8,
 	0x0fc021c0, 0x07c02bc7, 0x0fc021c0, 0x07c02b07, 0x0fc031c0,
-	0x07c02b47, 0x0fc021c0, 0x07c00b07, 0x07802707, 0x07800b48,
+	0x07c02b47, 0x0fc021c0, 0x07c012c7, 0x07802707, 0x07800b48,
 	0x096621c8, 0x07802988, 0x096221c8, 0x07802c48, 0x096011c8,
 	0x07802948, 0x094421c8, 0x07802cc8, 0x095841c8, 0x07802ac8,
 	0x095041c8, 0x04c101c7, 0x0c780a00, 0x060c2107, 0x0c0768c0,
 	0x0680004a, 0x07c02ac8, 0x0fc021c0, 0x07c02bc7, 0x0fc021c0,
 	0x07c02b07, 0x0fc031c0, 0x07c02b47, 0x0fc021c0, 0x0c780300,
-	0x07c00b07, 0x0fc031c0, 0x07c02bc7, 0x07800547, 0x0aa0c007,
+	0x07c012c7, 0x0fc031c0, 0x07c02bc7, 0x07800547, 0x0aa0c007,
 	0x06800087, 0x068000c7, 0x0f8001c7, 0x07c02b07, 0x0fc031c0,
 	0x07c02b47, 0x07802707, 0x07800b48, 0x096621c8, 0x07802c48,
 	0x096011c8, 0x07802948, 0x094421c8, 0x07802ac8, 0x095041c8,
@@ -586,12 +583,12 @@ static const u32 MicroCode[] __initconst = {
 	0x07802988, 0x096221c8, 0x07802c48, 0x096011c8, 0x07802948,
 	0x094421c8, 0x07802cc8, 0x095841c8, 0x07802ac8, 0x095041c8,
 	0x04c101c7, 0x0c7fe640, 0x060c2107, 0x07800247, 0x0a614047,
-	0x00000000, 0x0c073dc0, 0x0680008a, 0x07c00ac8, 0x0c073d00,
+	0x00000000, 0x0c073dc0, 0x0680008a, 0x07c01288, 0x0c073d00,
 	0x0680000a, 0x07c026c8, 0x07802647, 0x0ae38207, 0x07802447,
 	0x0aa30007, 0x06800007, 0x0fc011c0, 0x0aa24007, 0x06800007,
 	0x0fc011c0, 0x0aa18007, 0x06800047, 0x0c073980, 0x0680004a,
 	0x07c02748, 0x06800087, 0x07c02707, 0x07802448, 0x09422207,
-	0x07800049, 0x09461209, 0x060c3108, 0x07800ac8, 0x097041c8,
+	0x07800049, 0x09461209, 0x060c3108, 0x07801288, 0x097041c8,
 	0x078026c8, 0x095841c8, 0x07802748, 0x095041c8, 0x04c101c7,
 	0x060c2107, 0x0fc011c0, 0x0aa10007, 0x06800007, 0x0fc011c0,
 	0x040011c7, 0x07c02787, 0x0fc011c0, 0x0aa10007, 0x06800007,
@@ -605,7 +602,7 @@ static const u32 MicroCode[] __initconst = {
 	0x07802c89, 0x09008249, 0x0e000248, 0x00000000, 0x00000000,
 	0x0f000200, 0x05808208, 0x0b20c0c8, 0x00000000, 0x068000c8,
 	0x097221c8, 0x07800489, 0x02408209, 0x0b20c108, 0x04401208,
-	0x068000c8, 0x097621c8, 0x078004c8, 0x097a11c8, 0x07800b08,
+	0x068000c8, 0x097621c8, 0x078004c8, 0x097a11c8, 0x078012c8,
 	0x097c21c8, 0x060c0907, 0x0a624060, 0x0a6200a0, 0x07802448,
 	0x0a618008, 0x078020c8, 0x0aa100c8, 0x0c780000, 0x0c780380,
 	0x00000000, 0x078020c8, 0x0aa200c8, 0x06840007, 0x07802708,
@@ -642,7 +639,7 @@ static const u32 MicroCode[] __initconst = {
 	0x0920ca28, 0x0649532a, 0x09001aaa, 0x02028aa8, 0x0a6e4028,
 	0x0cc00000, 0x00000000, 0x0c07fd40, 0x00000000, 0x06495028,
 	0x09828028, 0x09828068, 0x06095028, 0x09c28028, 0x09c28068,
-	0x06095028, 0x068c0028, 0x06c0bca8, 0x020288e8, 0x06097d28,
+	0x06095028, 0x068c0028, 0x06c07e68, 0x020288e8, 0x06097d28,
 	0x06980028, 0x06d00028, 0x06097e28, 0x06a20928, 0x06c00228,
 	0x07800269, 0x0a61c069, 0x00000000, 0x09828028, 0x078009a9,
 	0x06498e2a, 0x097c1aa9, 0x06098e2a, 0x06095128, 0x0cc00000,
@@ -670,9 +667,9 @@ static const u32 MicroCode[] __initconst = {
 	0x0aa14087, 0x06d00888, 0x06885048, 0x0c780080, 0x06c81008,
 	0x0cc00000, 0x060c0f08, 0x0680400a, 0x06c0008a, 0x0681410b,
 	0x06c0018b, 0x0682420c, 0x06c0028c, 0x07800247, 0x0aa0c007,
-	0x06800008, 0x06800048, 0x06499207, 0x0780170d, 0x0a80a287,
-	0x09404348, 0x0780170d, 0x0a8072c7, 0x09484348, 0x0780170d,
-	0x0a804307, 0x09504348, 0x0780170d, 0x09584348, 0x07c0170d,
+	0x06800008, 0x06800048, 0x06499207, 0x0780130d, 0x0a80a287,
+	0x09404348, 0x0780130d, 0x0a8072c7, 0x09484348, 0x0780130d,
+	0x0a804307, 0x09504348, 0x0780130d, 0x09584348, 0x07c0130d,
 	0x05402208, 0x06499007, 0x0a807287, 0x0900438d, 0x0a8052c7,
 	0x0908438d, 0x0a803307, 0x0910438d, 0x0918438d, 0x0940120e,
 	0x06499107, 0x0a807287, 0x0900438d, 0x0a8052c7, 0x0908438d,
diff --git a/drivers/amlogic/amports/vvc1.c b/drivers/amlogic/amports/vvc1.c
index 1e36d13..30f0388 100644
--- a/drivers/amlogic/amports/vvc1.c
+++ b/drivers/amlogic/amports/vvc1.c
@@ -65,8 +65,8 @@
 #define VC1_OFFSET_REG      AV_SCRATCH_C
 #define MEM_OFFSET_REG      AV_SCRATCH_F
 
-#define VF_POOL_SIZE          32
-#define DECODE_BUFFER_NUM_MAX 8
+#define VF_POOL_SIZE          16
+#define DECODE_BUFFER_NUM_MAX 4
 #define PUT_INTERVAL        (HZ/100)
 
 #if 1	/* /MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
@@ -172,10 +172,9 @@ static inline bool close_to(int a, int b, int m)
 
 static inline u32 index2canvas(u32 index)
 {
-	const u32 canvas_tab[DECODE_BUFFER_NUM_MAX] = {
+	const u32 canvas_tab[4] = {
 #if 1	/* ALWASY.MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
-		0x010100, 0x030302, 0x050504, 0x070706,
-		0x090908, 0x0b0b0a, 0x0d0d0c, 0x0f0f0e
+		0x010100, 0x030302, 0x050504, 0x070706
 #else
 		0x020100, 0x050403, 0x080706, 0x0b0a09
 #endif
@@ -286,9 +285,9 @@ static irqreturn_t vvc1_isr(int irq, void *dev_id)
 		}
 
 
-                repeat_count = READ_VREG(VC1_REPEAT_COUNT);
-                buffer_index = reg & 0x7;
-                picture_type = (reg >> 3) & 7;
+		repeat_count = READ_VREG(VC1_REPEAT_COUNT);
+		buffer_index = ((reg & 0x7) - 1) & 3;
+		picture_type = (reg >> 3) & 7;
 
 		if (pts_by_offset) {
 			offset = READ_VREG(VC1_OFFSET_REG);
@@ -744,30 +743,30 @@ static void vvc1_canvas_init(void)
 		disp_addr = (cur_canvas.addr + 7) >> 3;
 	}
 
-	for (i = 0; i < 8; i++) {
+	for (i = 0; i < 4; i++) {
 		if (((buf_start + i * decbuf_size + 7) >> 3) == disp_addr) {
 #ifdef NV21
 			canvas_config(2 * i + 0,
-				buf_start + 8 * decbuf_size,
+				buf_start + 4 * decbuf_size,
 				canvas_width, canvas_height,
 				CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_32X32);
 			canvas_config(2 * i + 1,
-				buf_start + 8 * decbuf_size +
+				buf_start + 4 * decbuf_size +
 				decbuf_y_size, canvas_width,
 				canvas_height / 2, CANVAS_ADDR_NOWRAP,
 				CANVAS_BLKMODE_32X32);
 #else
 			canvas_config(3 * i + 0,
-				buf_start + 8 * decbuf_size,
+				buf_start + 4 * decbuf_size,
 				canvas_width, canvas_height,
 				CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_32X32);
 			canvas_config(3 * i + 1,
-				buf_start + 8 * decbuf_size +
+				buf_start + 4 * decbuf_size +
 				decbuf_y_size, canvas_width / 2,
 				canvas_height / 2, CANVAS_ADDR_NOWRAP,
 				CANVAS_BLKMODE_32X32);
 			canvas_config(3 * i + 2,
-				buf_start + 8 * decbuf_size +
+				buf_start + 4 * decbuf_size +
 				decbuf_y_size + decbuf_uv_size,
 				canvas_width / 2, canvas_height / 2,
 				CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_32X32);
@@ -839,19 +838,11 @@ static void vvc1_prot_init(void)
 	WRITE_VREG(AV_SCRATCH_1, 0x030302);
 	WRITE_VREG(AV_SCRATCH_2, 0x050504);
 	WRITE_VREG(AV_SCRATCH_3, 0x070706);
-	WRITE_VREG(AV_SCRATCH_G, 0x090908);
-	WRITE_VREG(AV_SCRATCH_H, 0x0b0b0a);
-	WRITE_VREG(AV_SCRATCH_I, 0x0d0d0c);
-	WRITE_VREG(AV_SCRATCH_J, 0x0f0f0e);
 #else
 	WRITE_VREG(AV_SCRATCH_0, 0x020100);
 	WRITE_VREG(AV_SCRATCH_1, 0x050403);
 	WRITE_VREG(AV_SCRATCH_2, 0x080706);
 	WRITE_VREG(AV_SCRATCH_3, 0x0b0a09);
-	WRITE_VREG(AV_SCRATCH_G, 0x090908);
-	WRITE_VREG(AV_SCRATCH_H, 0x0b0b0a);
-	WRITE_VREG(AV_SCRATCH_I, 0x0d0d0c);
-	WRITE_VREG(AV_SCRATCH_J, 0x0f0f0e);
 #endif
 
 	/* notify ucode the buffer offset */
